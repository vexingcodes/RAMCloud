debugging changes

From: nobody <nobody@nowhere>


---
 src/DpdkDriver.cc |    6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/DpdkDriver.cc b/src/DpdkDriver.cc
index a5408b0e..2258cbc7 100644
--- a/src/DpdkDriver.cc
+++ b/src/DpdkDriver.cc
@@ -452,6 +452,7 @@ DpdkDriver::receivePackets(uint32_t maxPackets,
         }
         new(sender) MacAddress(ethHdr->s_addr.addr_bytes);
         packet_buf_type(payload) = DPDK_MBUF;
+        LOG(WARNING, "received DPDK_MBUF payload=%p, rte_mbuf=%p, type=%i\n", payload, m, packet_buf_type(payload));
         packetBufsUtilized++;
         uint32_t length = rte_pktmbuf_pkt_len(m) - headerLength;
         assert(length <= MAX_PAYLOAD_SIZE);
@@ -482,8 +483,11 @@ DpdkDriver::releaseHint(int maxCount)
         packetBufsUtilized--;
         assert(packetBufsUtilized >= 0);
         if (packet_buf_type(payload) == DPDK_MBUF) {
+            LOG(WARNING, "releasing DPDK_MBUF payload=%p, rte_mbuf=%p, type=%i\n", payload, payload_to_mbuf(payload), packet_buf_type(payload));
             rte_pktmbuf_free(payload_to_mbuf(payload));
         } else {
+            LOG(WARNING, "releasing RAMCLOUD_PACKET_BUF payload=%p, rte_mbuf=%p, type %i\n", payload, payload_to_mbuf(payload), packet_buf_type(payload));
+            assert(packet_buf_type(payload) == RAMCLOUD_PACKET_BUF);
             packetBufPool.destroy(reinterpret_cast<PacketBuf*>(
                     payload - OFFSET_OF(PacketBuf, payload)));
         }
@@ -499,6 +503,7 @@ DpdkDriver::releaseHwPacketBuf(Driver::Received* received)
     // Copy the sender address and payload to our PacketBuf.
     PacketBuf* packetBuf = packetBufPool.construct();
     packetBuf->sender.construct(*sender);
+    LOG(WARNING, "releaseHwPacketBuf old payload is %p new payload is %p\n", received->payload, packetBuf->payload);
     packet_buf_type(packetBuf->payload) = RAMCLOUD_PACKET_BUF;
     rte_memcpy(packetBuf->payload, received->payload, received->len);
     // Replace rte_mbuf with our PacketBuf and release it.
@@ -531,6 +536,7 @@ DpdkDriver::sendPacket(const Address* addr,
     struct rte_mbuf* mbuf = &mockMbuf;
 #else
     struct rte_mbuf* mbuf = rte_pktmbuf_alloc(mbufPool);
+    LOG(WARNING, "sending rte_mbuf=%p\n", mbuf);
 #endif
     if (unlikely(NULL == mbuf)) {
         uint32_t numMbufsAvail = rte_mempool_avail_count(mbufPool);
